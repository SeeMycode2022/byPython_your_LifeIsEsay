import tkinter as tk
from functions.functions_convert import *
import functions.Base32
import functions.Base64
import sys

class NumberConverterApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Number Converter")

        self.create_widgets()

    def create_widgets(self):
        # Create labels, entry widgets, and buttons
        self.label = tk.Label(self.root, text="Enter a number:")
        self.label.pack()

        self.entry = tk.Entry(self.root)
        self.entry.pack()

        self.convert_button = tk.Button(self.root, text="Convert", command=self.perform_conversion)
        self.convert_button.pack()

        self.result_label = tk.Label(self.root, text="")
        self.result_label.pack()

        # Create a combo box for conversion types
        self.conversion_type_var = tk.StringVar()
        self.conversion_type_var.set("Decimal to Binary")  # Default selection
        self.conversion_type_options = [
            "Decimal to Binary", "Decimal to Hexadecimal", "Decimal to Octal",
            "Binary to Decimal", "Binary to Hexadecimal" , "Binary to Octal" , 
            "Hexadecimal to Decimal", "Hexadecimal to Binary" , "Hexadecimal to Octal",
            "Octal to Decimal", "Octal to Binary", "Octal to Hexadecimal",
            "Base64 Encoding", "Base32 Encoding" , 
        ]
        self.conversion_type_menu = tk.OptionMenu(self.root, self.conversion_type_var, *self.conversion_type_options)
        self.conversion_type_menu.pack()

    def perform_conversion(self):
        input_value = self.entry.get()
        conversion_type = self.conversion_type_var.get()

        try:
            if "Decimal to Binary" in conversion_type:
                result = decimal_to_binary(int(input_value))
            elif "Decimal to Hexadecimal" in conversion_type:
                result = decimal_to_hexadecimal(int(input_value))
            elif "Decimal to Octal" in conversion_type: #decimal
                result = decimal_to_octal(int(input_value))   
            elif "Binary to Decimal" in conversion_type:
                result = convert_to_decimal(input_value, 2)
            elif "Binary to Hexadecimal" in conversion_type:
                value = convert_to_decimal(input_value, 2)
                result = decimal_to_hexadecimal(value)
            elif "Binary to Octal" in conversion_type:
                value = convert_to_decimal(input_value , 2)
                result = decimal_to_octal(value)   
            elif "Hexadecimal to Decimal" in conversion_type:
                result = convert_to_decimal(input_value, 16)
            elif "Hexadecimal to Binary" in conversion_type:
                value = convert_to_decimal(input_value , 16)
                result = decimal_to_binary(value)
            elif "Hexadecimal to Octal" in conversion_type:
                value = convert_to_decimal(input_value , 16)
                result = decimal_to_octal(value)    
            elif "Octal to Decimal" in conversion_type:
                result = convert_to_decimal(input_value, 8)
            elif "Octal to Binary" in conversion_type :
                value = convert_to_decimal(input_value , 8)
                result = decimal_to_binary(value)
            elif "Octal to Hexadecimal" in conversion_type:
                value = convert_to_decimal(input_value , 8)
                result = decimal_to_hexadecimal(value)
            elif "Base64 Encoding" in conversion_type:
                result = functions.Base64.encode_to_base64(input_value)
            elif "Base32 Encoding" in conversion_type:
                result = functions.Base32.encode_to_base32(input_value)
            else:
                result = "Invalid conversion type"
            
            self.result_label.config(text=result)
        except ValueError:
            self.result_label.config(text="Invalid input")

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = NumberConverterApp(root)
    app.run()
